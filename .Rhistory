k = k + 1}}}
hist(a)
}
q9(10,10)
# Q9
q9 = function(n,r){
a = c(NULL)
k = 1
# cria um vetor vazio
for(j in 1:n){
# roda n vezes
Sn = 0
# gruarda o número de vezes que sobe e desce
for(i in 1:r){
# roda r vezes
m = runif(1)
# numero aleatorio entre 0 e 1
if(m<0.5){Sn = Sn + 1}else{Sn = Sn - 1}
# se > 0.5, + 1, se < 0.5: -1;
if(Sn == 0){
a[k] = i
k = k + 1}}}
hist(a, breaks = 10)
}
q9(10,10)
# Q9
q9 = function(n,r){
a = c(NULL)
k = 1
# cria um vetor vazio
for(j in 1:n){
# roda n vezes
Sn = 0
# gruarda o número de vezes que sobe e desce
for(i in 1:r){
# roda r vezes
m = runif(1)
# numero aleatorio entre 0 e 1
if(m<0.5){Sn = Sn + 1}else{Sn = Sn - 1}
# se > 0.5, + 1, se < 0.5: -1;
if(Sn == 0){
a[k] = i
k = k + 1}}}
hist(a, breaks = 10)
}
q9(10,10)
# Q9
q9 = function(n,r){
a = c(NULL)
k = 1
# cria um vetor vazio
for(j in 1:n){
# roda n vezes
Sn = 0
# gruarda o número de vezes que sobe e desce
for(i in 1:r){
# roda r vezes
m = runif(1)
# numero aleatorio entre 0 e 1
if(m<0.5){Sn = Sn + 1}else{Sn = Sn - 1}
# se > 0.5, + 1, se < 0.5: -1;
if(Sn == 0){
a[k] = i
k = k + 1}}}
a
hist(a, breaks = 10)
}
q9(10,10)
# Q9
q9 = function(n,r){
a = c(NULL)
k = 1
# cria um vetor vazio
for(j in 1:n){
# roda n vezes
Sn = 0
# gruarda o número de vezes que sobe e desce
for(i in 1:r){
# roda r vezes
m = runif(1)
# numero aleatorio entre 0 e 1
if(m<0.5){Sn = Sn + 1}else{Sn = Sn - 1}
# se > 0.5, + 1, se < 0.5: -1;
if(Sn == 0){
a[k] = i
k = k + 1}}}
print(a)
hist(a, breaks = 10)
}
q9(10,10)
cat(resp)
# Q1 - r mudanças de sinal em 2n+1 unidades de tempo;
q1 = function(n,r){
resp = choose(2*n+1 , n+r+1)/(2^(2*n))
cat(resp)
}
q1(2,2)
q1(10,10)
q1(10,1)
q1(1,1)
# Q2 - prob do ponto máx de um PA de tamanho n ser r
q2 = function(n,r){
if(n < r){stop("n deve ser maior ou igual a r")}
if((n+r)%%2 == 0){
resp = choose(n, (n+r)/2)/(2^n)
}else{
resp = choose(n, (n+r+1)/2)/(2^n)
}
cat(resp)
}
q2(9,6)
q2(9,9)
q2(2,2)
q2(2,1)
q2(2,0)
q3 = function(n,r){
f  = c(NULL)
c  = c(NULL)
b  = c(NULL)
for(i in 1:r){
# rodando os 1000 passeios
a  = 0
# zerando para a contagem do proximo Passeio
d  = 0
# zerando para a contagem do proximo Passeio
v  = c(NULL)
Sn = 0
for(j in 1:n){
# rodando Passeio de 199 passos
m = runif(1)
# criando o passeio
if(m < 0.5){Sn = Sn + 1}else{Sn = Sn - 1}
v[j] = Sn
if(j > 2){
# um Passeio so pode mudar de sinal depois do 2 momento;
if(v[j - 2] > 0 & v[j] < 0 || v[j - 2] < 0 & v[j] > 0){a = a + 1}
# contando o numero de troca de sinal de cada passeio;
}
if(Sn > 0){d = d + 1}
# contando o numero de lados acima do eixo x de cada passeio
}
f[i] = a
# armazenando o numero de troca de sinal de cada passeio
b[i] = max(v)
# armazenando o maior valor de cada passeio
c[i] = d
# armazenando o numero de lados acima do eixo x
}
cat("\nNumero de troca de sinais de cada Passeio:",f)
cat("\n")
cat("\nO maior valor de cada Passeio:",b)
cat("\n")
cat("\nO numero de lados de acima do eixo x de cada passeio:",c)
plot(v)
}
q3(199,3)
q3(199,3)
# A
q3a = function(n,r){
f  = c(NULL)
c  = c(NULL)
b  = c(NULL)
for(i in 1:r){
# rodando os 1000 passeios
a = 0
# zerando para a contagem do proximo Passeio
d = 0
# zerando para a contagem do proximo Passeio
v = c(NULL)
# limpando o vetor v para armazenar o proximo Passeio
Sn = 0
# zerando para a contagem do Sn do proximo Passeio
for(j in 1:n){
# rodando Passeio de 199 passos
m = runif(1)
# criando o passeio
if(m < 0.5){Sn = Sn + 1}else{Sn = Sn - 1}
v[j] = Sn
if(j > 2){
# um Passeio so pode mudar de sinal depois do 2 momento;
if(v[j - 2] > 0 & v[j] < 0 || v[j - 2] < 0 & v[j] > 0){a = a + 1}
# contando o numero de troca de sinal de cada passeio;
}
if(Sn > 0){d = d + 1}
# contando o numero de lados acima do eixo x de cada passeio
}
f[i] = a
# armazenando o n?mero de troca de sinal de cada passeio
b[i] = max(v)
# armazenando o maior valor de cada passeio
c[i] = d
# armazenando o n?mero de lados acima do eixo x
}
cat("\nNumero de troca de sinais de cada Passeio:",f)
cat("\n")
cat("\nO maior valor de cada Passeio:",b)
cat("\n")
cat("\nO numero de lados de acima do eixo x de cada passeio:",c)
hist(f)
}
q3(199,3)
# A
q3a = function(n,r){
f  = c(NULL)
c  = c(NULL)
b  = c(NULL)
for(i in 1:r){
# rodando os 1000 passeios
a = 0
# zerando para a contagem do proximo Passeio
d = 0
# zerando para a contagem do proximo Passeio
v = c(NULL)
# limpando o vetor v para armazenar o proximo Passeio
Sn = 0
# zerando para a contagem do Sn do proximo Passeio
for(j in 1:n){
# rodando Passeio de 199 passos
m = runif(1)
# criando o passeio
if(m < 0.5){Sn = Sn + 1}else{Sn = Sn - 1}
v[j] = Sn
if(j > 2){
# um Passeio so pode mudar de sinal depois do 2 momento;
if(v[j - 2] > 0 & v[j] < 0 || v[j - 2] < 0 & v[j] > 0){a = a + 1}
# contando o numero de troca de sinal de cada passeio;
}
if(Sn > 0){d = d + 1}
# contando o numero de lados acima do eixo x de cada passeio
}
f[i] = a
# armazenando o numero de troca de sinal de cada passeio
b[i] = max(v)
# armazenando o maior valor de cada passeio
c[i] = d
# armazenando o n?mero de lados acima do eixo x
}
cat("\nNumero de troca de sinais de cada Passeio:",f)
cat("\n")
cat("\nO maior valor de cada Passeio:",b)
cat("\n")
cat("\nO numero de lados de acima do eixo x de cada passeio:",c)
hist(f)
}
q3a(199,10000)
Q4 = function(n){
x = 0
y = 0
v = c(NULL)
z = c(NULL)
v[1] = 0
z[1] = 0
for(i in 2:n){
# começa com 2. pois o primeiro momento já esta em (0,0)
m = runif(1)
if(m<0.5){
# se m < 0.5, se move na horizontal
m=runif(1)
if(m<0.5){x=x+1}else{x=x-1}
# se m < 0.5, se move para direita, senão, para a esquerda
v[i] = x
if(i == 1){z[i] = 0}else
# a coordenada vertical se mantém
{z[i] = z[i-1]}
}else{
# se m > 0.5, se move na vertical
m=runif(1)
if(m<0.5){y=y+1}else{y=y-1}
# se m < 0.5, se move para cima, senão, para baixo
z[i] = y
if(i == 1){v[i] = 0}else
# a coordenada horizontal se mantém
{v[i] = v[i-1]}
}}
plot(v,z, type = "l")
# plotando o gráfico em linhas
}
Q4(1000)
Q5 = function(n,r){
x  = 0
y  = 0
v  = c(NULL)
z  = c(NULL)
Sn = c(NULL)
v[1]  = 0
# similar ao passeio anterior
z[1]  = 0
for(j in 1:r){
for(i in 2:n){
m = runif(1)
if(m<0.5){
m=runif(1)
if(m<0.5){x=x+1}else{x=x-1}
v[i] = x
if(i == 1){z[i] = 0}else
{z[i] = z[i-1]}
}else{
m=runif(1)
if(m<0.5){y=y+1}else{y=y-1}
z[i] = y
if(i == 1){v[i] = 0}else
{v[i] = v[i-1]}
}}
Sn[j] = sqrt((v[n])^2) + sqrt((z[n])^2)
}
hist(Sn)
}
Q5(1000,100)
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c)
cat("\nVetor com o maior valor de cada intervalo:",s)
#     cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6(3,1000)
q6(5,1000)
q6(10,1000)
q6(20,1000)
q6(100,1000)
q6(3,1000)
q6(5,1000)
q6(10,1000)
q6(20,1000)
q6(100,1000)
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c, break = c)
cat("\nVetor com o maior valor de cada intervalo:",s)
#     cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c, break = c)
cat("\nVetor com o maior valor de cada intervalo:",s)
#     cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c, break = c)
cat("\nVetor com o maior valor de cada intervalo:",s)
#     cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c, break = n)
cat("\nVetor com o maior valor de cada intervalo:",s)
#     cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6(3,1000)
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c, break = r)
cat("\nVetor com o maior valor de cada intervalo:",s)
#     cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6(3,1000)
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c)
cat("\nVetor com o maior valor de cada intervalo:",s)
#     cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6(3,1000)
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c)
cat("\nVetor com o maior valor de cada intervalo:",s)
#     cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6(3,1000)
q6 = function(r,n){
m = c(NULL)
# vetor que contera os valores de runif;
s = c(NULL)
# vetor que contera o maior valor de cada instervalo;
c = c(NULL)
for (i in 1:r){s[i] = i/r}
for(j in 1:n){
f = rep(0,r)
# vetor que contera os intervalos ao qual cada runif pertence;
for(i in 1:r){
m[i] = runif(1)
if(m[i]<0.5){f[i] = f[i] + 1}
if(f[i] == 2)break}
c[j] = sum(f)
}
# obs: os intervalos sao como os amigos e runif sao como as visitas;
hist(c)
cat("\nVetor com o maior valor de cada intervalo:",s)
cat("\nVetor com os vizinhos que foram visitados:",f)
}
q6(3,1000)
